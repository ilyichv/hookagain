{
  "name": "use-local-storage",
  "type": "registry:hook",
  "dependencies": [],
  "files": [
    {
      "path": "hooks/use-local-storage.ts",
      "content": "import * as React from \"react\";\n\nexport function useLocalStorage<T>(\n\tkey: string,\n\tdefaultValue: T,\n): [T, (value: T) => void] {\n\tconst [value, setValue] = React.useState(defaultValue);\n\n\tReact.useEffect(() => {\n\t\tconst item = localStorage.getItem(key);\n\n\t\tif (!item) {\n\t\t\tlocalStorage.setItem(key, JSON.stringify(defaultValue));\n\t\t}\n\n\t\tsetValue(item ? JSON.parse(item) : defaultValue);\n\n\t\tfunction handler(e: StorageEvent) {\n\t\t\tif (e.key !== key) return;\n\n\t\t\tconst lsi = localStorage.getItem(key);\n\n\t\t\tsetValue(JSON.parse(lsi ?? \"\"));\n\t\t}\n\n\t\twindow.addEventListener(\"storage\", handler);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"storage\", handler);\n\t\t};\n\t}, []);\n\n\tconst setValueWrap = (value: T) => {\n\t\ttry {\n\t\t\tsetValue(value);\n\n\t\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t\t\tif (typeof window !== \"undefined\") {\n\t\t\t\twindow.dispatchEvent(new StorageEvent(\"storage\", { key }));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n\n\treturn [value, setValueWrap];\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}